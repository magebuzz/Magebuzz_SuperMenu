<?php 
  $catData = $this->getCategoryIds();
  $idHidden = $this->getHidenInputId();
?>
<input type="hidden" name="<?php echo $idHidden;?>" id="<?php echo $idHidden;?>" value="<?php echo $this->getIdsString() ?>">
<div id="feature-categories" class="tree"></div>   
<?php if ($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
  <script type="text/javascript">    
    Ext.EventManager.onDocumentReady(function() {
      var categoryLoader = new Ext.tree.TreeLoader({
        dataUrl: '<?php echo $this->getUrl('*/*/featuredCategoriesJson', array('_current' => true));    ?>'
      });

      categoryLoader.createNode = function(config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
          delete(config.children);
          node = new Ext.tree.AsyncTreeNode(config);

        } else {
          node = new Ext.tree.TreeNode(config);
        }
        return node;
      };

      categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.category = node.attributes.id;
      });

      categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
      });

      var tree = new Ext.tree.TreePanel('feature-categories', {
        animate:false,
        loader: categoryLoader,
        enableDD:false,
        containerScroll: true,
        rootUIProvider: Ext.tree.CheckboxNodeUI,
        selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
        rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
      });

      tree.on('check', function(node) {
        if(node.attributes.checked) {
          featuredCategoryAdd(node.id);
        } else {
          featuredCategoryRemove(node.id);
        };
        if(!node.loading) {
          for(var i = 0; i< node.childNodes.length; i++)
            node.childNodes[i].getUI().check(node.getUI().checked());
        }
      }, tree);

      // set the root node
      var root = new Ext.tree.TreeNode({
        text: '<?php echo $this->getRootNode()->getName() ?>',
        draggable:false,
        checked:'<?php echo $this->getRootNode()->getChecked() ?>',
        id:'<?php echo $this->getRootNode()->getId() ?>',
        disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
        uiProvider: Ext.tree.CheckboxNodeUI
      });

      tree.setRootNode(root);
      bildCategoryTree(root, <?php echo $this->getTreeJson() ?>);
      tree.addListener('click', categoryClick.createDelegate(this));

      // render the tree
      tree.render();
      root.expand();      
    });

    function bildCategoryTree(parent, config){
      if (!config) return null;

      if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
          config[i].uiProvider = Ext.tree.CheckboxNodeUI;
          var node;
          var _node = Object.clone(config[i]);
          if (_node.children && !_node.children.length) {
            delete(_node.children);
            node = new Ext.tree.AsyncTreeNode(_node);

          } else {
            node = new Ext.tree.TreeNode(config[i]);
          }
          parent.appendChild(node);
          node.loader = node.getOwnerTree().loader;
          if(config[i].children){
            bildCategoryTree(node, config[i].children);
          }
        }
      }
    }

    function categoryClick(node, e){
      if (node.disabled) {
        return;
      }
      node.getUI().check(!node.getUI().checked())
      varienElementMethods.setHasChanges(Event.element(e), e);
    };
    function featuredCategoryAdd(id) {
      var ids = $('<?php echo $idHidden;?>').value.split(',');    
      ids.push(id);
      $('<?php echo $idHidden;?>').value = ids.join(',');
    }
    function featuredCategoryRemove(id) {
      var ids = $('<?php echo $idHidden;?>').value.split(',');
      // bug #7654 fixed
      while (-1 != ids.indexOf(id)) {
        ids.splice(ids.indexOf(id), 1);
      }
      $('<?php echo $idHidden;?>').value = ids.join(',');
    }
  </script>
  <?php endif; ?>       
