<?php
/*
* Copyright (c) 2014 www.magebuzz.com
*/
$catData = $this->getCategoryIds();
$idHidden = $this->getHidenInputId();
$dataForm = $this->categoryData();
$templates = Mage::helper('supermenu')->categoryTemplate();
?>
<div class="entry-edit">
  <div class="entry-edit-head">
    <h4 class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('catalog')->__($this->getTitleContent()) ?></h4>
  </div>
  <fieldset id="grop_fields">
    <table cellspacing="0" class="form-list">
      <tbody>
      <tr id='tree_category_view'>
        <td class="label"><label><?php echo $this->__('Select Categories') ?></label></td>
        <td class="value">
          <input type="hidden" name="<?php echo $idHidden; ?>" id="<?php echo $idHidden; ?>"
                 value="<?php echo $this->getIdsString() ?>">

          <div id="product-categories" class="tree"></div>
        </td>
      </tr>

      <tr>
        <td class="label" for="template_id"><label><?php echo $this->__('Layout') ?><span
                class="required">*</span></label></td>
        <td class="value">
          <select class="select" name="template_id" id="template_id">
            <?php foreach ($templates as $key => $value): ?>
              <option <?php if ($dataForm['template_id'] == $key): ?>selected="selected"<?php endif; ?>
                      value="<?php echo $key ?>"><?php echo $value; ?></option>
            <?php endforeach; ?>
          </select>
        </td>
      </tr>
      <tr id="category_information_number">
        <td class="label" for="number_of_column"><label><?php echo $this->__('Number of Columns') ?><span
                class="required">*</span></label></td>
        <td class="value">
          <input type="text" class="input-text validate-number required-entry"
                 value="<?php echo isset($dataForm['number_of_column']) ? $dataForm['number_of_column'] : '' ?>"
                 name="number_of_column" id="number_of_column">
        </td>
      </tr>
      <tr id="category_information_width">
        <td class="label" for="width_of_column"><label><?php echo $this->__('Column width') ?><span
                class="required">*</span></label></td>
        <td class="value">
          <input type="text" class="input-text validate-number required-entry"
                 value="<?php echo isset($dataForm['width_of_column']) ? $dataForm['width_of_column'] : '' ?>"
                 name="width_of_column" id="width_of_column">(px)
        </td>
      </tr>
      <tr id="template2" style="display: none;">
        <td class="label" for="width_of_column"><label><?php echo $this->__('Full Width OF Box') ?><span
                class="required">*</span></label></td>
        <td class="value">
          <input type="text" class="input-text validate-number required-entry"
                 value="<?php echo isset($dataForm['width_of_column']) ? $dataForm['width_of_column'] : '' ?>"
                 name="width_of_column" id="width_of_column_template">(px)
        </td>
      </tr>
      </tbody>
    </table>
  </fieldset>
</div>


<script type="text/javascript">

  <?php if($dataForm['template_id'] == 2) :?>
  $('number_of_column').disabled = true;
  $('width_of_column').disabled = true;
  $('category_information_number').hide();
  $('category_information_width').hide();
  $('template2').show();
  $('width_of_column_template').disabled = false;
  <?php else:?>
  $('category_information_number').show();
  $('category_information_width').show();
  $('number_of_column').disabled = false;
  $('width_of_column').disabled = false;
  $('template2').hide();
  $('width_of_column_template').disabled = true;
  <?php endif;?>


  Event.observe($('template_id'), 'change', function () {
    var value = $('template_id').value;
    if (value == 2) {
      $('template2').show();
      $('width_of_column_template').disabled = false;
      $('category_information_number').hide();
      $('category_information_width').hide();
      $('number_of_column').disabled = true;
      $('width_of_column').disabled = true;
    } else {
      $('category_information_number').show();
      $('category_information_width').show();
      $('number_of_column').disabled = false;
      $('width_of_column').disabled = false;
      $('template2').hide();
      $('width_of_column_template').disabled = true;
    }
  });
</script>



<?php if ($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
  <script type="text/javascript">
    Ext.EventManager.onDocumentReady(function () {
      var categoryLoader = new Ext.tree.TreeLoader({
        dataUrl: '<?php echo $this->getLoadTreeUrl() ?>'
      });

      categoryLoader.createNode = function (config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
          delete(config.children);
          node = new Ext.tree.AsyncTreeNode(config);

        } else {
          node = new Ext.tree.TreeNode(config);
        }
        return node;
      };

      categoryLoader.on("beforeload", function (treeLoader, node) {
        treeLoader.baseParams.category = node.attributes.id;
      });

      categoryLoader.on("load", function (treeLoader, node, config) {
        varienWindowOnload();
      });

      var tree = new Ext.tree.TreePanel('product-categories', {
        animate: false,
        loader: categoryLoader,
        enableDD: false,
        containerScroll: true,
        rootUIProvider: Ext.tree.CheckboxNodeUI,
        selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
        rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
      });

      tree.on('check', function (node) {
        if (node.attributes.checked) {
          categoryAdd(node.id);
        } else {
          categoryRemove(node.id);
        }
        ;
        if (!node.loading) {
          for (var i = 0; i < node.childNodes.length; i++)
            node.childNodes[i].getUI().check(node.getUI().checked());
        }
      }, tree);

      // set the root node
      var root = new Ext.tree.TreeNode({
        text: '<?php echo $this->getRootNode()->getName() ?>',
        draggable: false,
        checked: '<?php echo $this->getRootNode()->getChecked() ?>',
        id: '<?php echo $this->getRootNode()->getId() ?>',
        disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
        uiProvider: Ext.tree.CheckboxNodeUI
      });

      tree.setRootNode(root);
      bildCategoryTree(root, <?php echo $this->getTreeJson() ?>);
      tree.addListener('click', categoryClick.createDelegate(this));

      // render the tree
      tree.render();
      root.expand();
      //tree.expandAll();
    });

    function bildCategoryTree(parent, config) {
      if (!config) return null;

      if (parent && config && config.length) {
        for (var i = 0; i < config.length; i++) {
          config[i].uiProvider = Ext.tree.CheckboxNodeUI;
          var node;
          var _node = Object.clone(config[i]);
          if (_node.children && !_node.children.length) {
            delete(_node.children);
            node = new Ext.tree.AsyncTreeNode(_node);

          } else {
            node = new Ext.tree.TreeNode(config[i]);
          }
          parent.appendChild(node);
          node.loader = node.getOwnerTree().loader;
          if (config[i].children) {
            bildCategoryTree(node, config[i].children);
          }
        }
      }
    }

    function categoryClick(node, e) {
      if (node.disabled) {
        return;
      }
      node.getUI().check(!node.getUI().checked())
      varienElementMethods.setHasChanges(Event.element(e), e);
    }
    ;
    function categoryAdd(id) {
      var ids = $('<?php echo $idHidden;?>').value.split(',');
      ids.push(id);
      $('<?php echo $idHidden;?>').value = ids.join(',');
    }
    function categoryRemove(id) {
      var ids = $('<?php echo $idHidden;?>').value.split(',');
      // bug #7654 fixed
      while (-1 != ids.indexOf(id)) {
        ids.splice(ids.indexOf(id), 1);
      }
      $('<?php echo $idHidden;?>').value = ids.join(',');
    }
  </script>
<?php endif; ?>
   